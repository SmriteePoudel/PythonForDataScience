{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "759fbe83-710f-40ae-b7aa-8f283b2d91f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix A:\n",
      " [[1 1 1]\n",
      " [7 1 1]\n",
      " [1 5 1]]\n",
      "Matrix B:\n",
      " [[4 4 8]\n",
      " [2 6 4]\n",
      " [2 5 9]]\n",
      "Dot Product:\n",
      " [[ 8 15 21]\n",
      " [32 39 69]\n",
      " [16 39 37]]\n",
      "Vector Product:\n",
      " [[  4  -4   0]\n",
      " [ -2 -26  40]\n",
      " [ 40  -7  -5]]\n",
      "Inner Product:\n",
      " [[16 12 16]\n",
      " [40 24 28]\n",
      " [32 36 36]]\n",
      "Matrix Multiplication:\n",
      " [[ 8 15 21]\n",
      " [32 39 69]\n",
      " [16 39 37]]\n",
      "Determinant of A: 24.000000000000004\n",
      "Sum of Diagonal Elements of A: 3\n",
      "Inverse of A:\n",
      " [[-1.66666667e-01  1.66666667e-01  0.00000000e+00]\n",
      " [-2.50000000e-01 -2.72113486e-18  2.50000000e-01]\n",
      " [ 1.41666667e+00 -1.66666667e-01 -2.50000000e-01]]\n",
      "Eigenvalues of A:\n",
      " [ 5.56931528+0.j         -1.28465764+1.63063841j -1.28465764-1.63063841j]\n",
      "Eigenvectors of A:\n",
      " [[-0.29456021+0.j         -0.07273727-0.18967337j -0.07273727+0.18967337j]\n",
      " [-0.61189927+0.j         -0.37326614+0.31473052j -0.37326614-0.31473052j]\n",
      " [-0.73403921+0.j          0.84873459+0.j          0.84873459-0.j        ]]\n",
      "Singular Value Decomposition (U, S, V) of A:\n",
      "U:\n",
      " [[-0.19468275  0.12543285 -0.97281305]\n",
      " [-0.8925964  -0.43384174  0.12269071]\n",
      " [-0.40665746  0.89221519  0.19642241]]\n",
      "Singular Values:\n",
      " [7.67369778 4.65433351 0.67196871]\n",
      "V:\n",
      " [[-0.8925964  -0.40665746 -0.19468275]\n",
      " [-0.43384174  0.89221519  0.12543285]\n",
      " [ 0.12269071  0.19642241 -0.97281305]]\n",
      "Uniform Distribution Samples:\n",
      " [0.5494904  0.06601466 0.80469239 0.60667436 0.89079708 0.13545964\n",
      " 0.07904256 0.52982973 0.39100162 0.25992478]\n",
      "Normal Distribution Samples:\n",
      " [ 0.16540864 -0.02806861 -1.00943635  3.11655189  0.17389425  1.33174004\n",
      " -1.56060263 -0.13095274  0.01397221  0.62075704]\n",
      "Binomial Distribution Samples:\n",
      " [6 6 5 5 7 6 4 3 7 4]\n",
      "Chi-Square Distribution Samples:\n",
      " [1.19707351 0.99575261 0.35905707 1.03827301 1.60183569 1.39960742\n",
      " 2.46338625 1.92091301 1.15047892 0.79356309]\n",
      "Gaussian Distribution Samples:\n",
      " [-1.51124462  0.49251867  0.80983632 -0.84867196  0.01355687 -0.92112553\n",
      "  2.53036963 -0.58599193 -0.07674582 -0.20971525]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "# Generate a random square matrix\n",
    "A = np.random.randint(1, 10, size=(3, 3))\n",
    "\n",
    "# Compute dot product, vector product, and inner product\n",
    "B = np.random.randint(1, 10, size=(3, 3))\n",
    "dot_product = np.dot(A, B)\n",
    "vector_product = np.cross(A, B)\n",
    "inner_product = np.inner(A, B)\n",
    "\n",
    "print(\"Matrix A:\\n\", A)\n",
    "print(\"Matrix B:\\n\", B)\n",
    "print(\"Dot Product:\\n\", dot_product)\n",
    "print(\"Vector Product:\\n\", vector_product)\n",
    "print(\"Inner Product:\\n\", inner_product)\n",
    "\n",
    "# Matrix operations\n",
    "matrix_multiplication = np.matmul(A, B)\n",
    "determinant_A = np.linalg.det(A)\n",
    "sum_diagonal_A = np.trace(A)\n",
    "inverse_A = np.linalg.inv(A) if determinant_A != 0 else \"Not invertible\"\n",
    "\n",
    "print(\"Matrix Multiplication:\\n\", matrix_multiplication)\n",
    "print(\"Determinant of A:\", determinant_A)\n",
    "print(\"Sum of Diagonal Elements of A:\", sum_diagonal_A)\n",
    "print(\"Inverse of A:\\n\", inverse_A)\n",
    "\n",
    "# Compute eigenvalues and eigenvectors\n",
    "eigenvalues, eigenvectors = np.linalg.eig(A)\n",
    "print(\"Eigenvalues of A:\\n\", eigenvalues)\n",
    "print(\"Eigenvectors of A:\\n\", eigenvectors)\n",
    "\n",
    "# Compute Singular Value Decomposition (SVD)\n",
    "U, S, V = np.linalg.svd(A)\n",
    "print(\"Singular Value Decomposition (U, S, V) of A:\")\n",
    "print(\"U:\\n\", U)\n",
    "print(\"Singular Values:\\n\", S)\n",
    "print(\"V:\\n\", V)\n",
    "\n",
    "# Generate random samples from different distributions\n",
    "uniform_samples = np.random.uniform(0, 1, 10)\n",
    "normal_samples = np.random.normal(0, 1, 10)\n",
    "binomial_samples = np.random.binomial(n=10, p=0.5, size=10)\n",
    "chi_square_samples = np.random.chisquare(df=2, size=10)\n",
    "gaussian_samples = np.random.randn(10)\n",
    "\n",
    "print(\"Uniform Distribution Samples:\\n\", uniform_samples)\n",
    "print(\"Normal Distribution Samples:\\n\", normal_samples)\n",
    "print(\"Binomial Distribution Samples:\\n\", binomial_samples)\n",
    "print(\"Chi-Square Distribution Samples:\\n\", chi_square_samples)\n",
    "print(\"Gaussian Distribution Samples:\\n\", gaussian_samples)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f72e9cd8-26cd-48ee-af0e-62400f19b803",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
